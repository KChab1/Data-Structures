#include <iostream>

using namespace std;

int main() {
    int j, k;
    int ident[5][5];
    int *myPtr;
    int *rowPtrs[5];
    int *temp;
    
    myPtr = &(ident[0][0]);
    
    for(j=0; j<5; j++){
        rowPtrs[j] = &(ident[j][0]);
        for(k=0; k<5; k++){
            if(j==k){
                *myPtr = 1;
            }
            else{
                *myPtr = 0;
            }
            myPtr++;
        }
       
    }
    printf("%d", myPtr);
}

//#4 d,e,f
#include <iostream>

using namespace std;
void printRow(int *myRow){
    int j;
    int *r;
    
    r = myRow;
    for(j = 0; j<5; j++){
        printf("%i", *r);
        r++;
    }// uses a pointer method to replace every value in the matrix to fill it with the number 1. 
    printf("\n");
}

int main() {

    int j, k;
    int ident[5][5];//initializing a 5x5 identity matrix
    int *myPtr;
    int *rowPtrs[5];
    int *temp;
    int *r0, *r1, *r2, *r3, *r4;
    
    myPtr = &(ident[0][0]);
    
    for(j = 0; j<5; j++){
        rowPtrs[j] = &(ident[j][0]);
        for(k = 0; k<5; k++){ //establishing the identity matrix
            if (j==k){
                *myPtr = 1;
            }
            else{
                *myPtr = 0;
            }
            *myPtr++;
        }
    }
    r0 = &(ident[0][0]); //creating pointer locations that denote the 1 value in each row. 
    r1 = &(ident[1][0]);
    r2 = &(ident[2][0]);
    r3 = &(ident[3][0]);
    r4 = &(ident[4][0]);
    
    myPtr = &(ident[0][0]); 
    for(j=0; j<5; j++){
        for(k=0; k<5; k++){
            printf("%i", *myPtr);
        }
        printf("\n");
    }
    temp = rowPtrs[0];
    rowPtrs[0] = rowPtrs[4]; //switching rows to show that the pointers work in remembering the values tied to each row. 
    rowPtrs[4] = temp;
    for(j=0; j<5; j++){
        printRow(rowPtrs[j]); //prints out the now switched matrix
    }
    
}
